import PyInstaller.__main__
import os
import shutil
import sys
from pathlib import Path
from datetime import datetime


def build_exe():
    """–°–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ –≤ EXE —Ñ–∞–π–ª —Å –≤–µ—Ä—Å–∏–µ–π –∏ –∏–∫–æ–Ω–∫–æ–π"""

    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–±–æ—Ä–∫–∏
    APP_VERSION = "0.6"  # ‚¨ÖÔ∏è –ó–î–ï–°–¨ –ú–ï–ù–Ø–ï–ú –í–ï–†–°–ò–Æ
    APP_NAME = f"ArchScanner_v{APP_VERSION}"
    ICON_PATH = "Res/app_icon.ico"  # ‚¨ÖÔ∏è –ü–£–¢–¨ –ö –ò–ö–û–ù–ö–ï

    print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä–∫—É EXE —Ñ–∞–π–ª–∞...")
    print("=" * 50)
    print(f"üìã –í–µ—Ä—Å–∏—è: {APP_VERSION}")
    print(f"üìÅ –ò–º—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {APP_NAME}")

    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É Releases –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    releases_dir = Path("Releases")
    releases_dir.mkdir(exist_ok=True)
    print(f"‚úÖ –ü–∞–ø–∫–∞ Releases: {releases_dir.absolute()}")

    # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–±–æ—Ä–æ–∫
    if Path("build").exists():
        shutil.rmtree("build")
        print("‚úÖ –û—á–∏—â–µ–Ω–∞ –ø–∞–ø–∫–∞ build")

    if Path("dist").exists():
        shutil.rmtree("dist")
        print("‚úÖ –û—á–∏—â–µ–Ω–∞ –ø–∞–ø–∫–∞ dist")

    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–±–æ—Ä–∫–∏
    build_params = [
        'main.py',
        '--onefile',
        '--windowed',
        f'--name={APP_NAME}',
        '--clean',
        '--noconfirm',
        '--add-data=scanner.py;.',
        '--add-data=excel_exporter.py;.',
        '--hidden-import=py7zr',
        '--hidden-import=rarfile',
        '--hidden-import=openpyxl',
        '--hidden-import=openpyxl.styles',
        '--hidden-import=openpyxl.workbook',
    ]

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if Path(ICON_PATH).exists():
        build_params.append(f'--icon={ICON_PATH}')
        print(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏–∫–æ–Ω–∫–∞: {ICON_PATH}")
    else:
        print("‚ö†Ô∏è –ò–∫–æ–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è")

    print("\nüì¶ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–±–æ—Ä–∫–∏:")
    for param in build_params:
        print(f"   {param}")

    print("\n‚è≥ –°–±–æ—Ä–∫–∞ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç...")
    print("=" * 50)

    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–±–æ—Ä–∫—É
        PyInstaller.__main__.run(build_params)

        # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º EXE —Ñ–∞–π–ª
        source_exe = Path("dist") / f"{APP_NAME}.exe"
        if source_exe.exists():
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Å –¥–∞—Ç–æ–π
            current_date = datetime.now().strftime("%Y%m%d")
            final_exe_name = f"{APP_NAME}_{current_date}.exe"
            final_exe_path = releases_dir / final_exe_name

            # –ö–æ–ø–∏—Ä—É–µ–º –≤ Releases
            shutil.copy2(source_exe, final_exe_path)

            print("üéâ –°–ë–û–†–ö–ê –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù–ê!")
            print("=" * 50)
            print(f"üìÅ –ò—Å—Ö–æ–¥–Ω—ã–π EXE: {source_exe.absolute()}")
            print(f"üìÅ –§–∏–Ω–∞–ª—å–Ω—ã–π EXE: {final_exe_path.absolute()}")
            print(f"üìè –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {final_exe_path.stat().st_size / (1024 * 1024):.2f} MB")

            # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–±–æ—Ä–∫–µ
            info_file = releases_dir / f"build_info_{APP_VERSION}_{current_date}.txt"
            with open(info_file, 'w', encoding='utf-8') as f:
                f.write(f"Archive Structure Scanner\n")
                f.write(f"Version: {APP_VERSION}\n")
                f.write(f"Build date: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
                f.write(f"File: {final_exe_name}\n")
                f.write(f"Size: {final_exe_path.stat().st_size} bytes\n")

            print(f"üìÑ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {info_file.name}")

            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É
            open_folder = input("\nüìÇ –û—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É Releases? (y/n): ")
            if open_folder.lower() == 'y':
                os.startfile(str(releases_dir))

        else:
            print("‚ùå –û—à–∏–±–∫–∞: EXE —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ —Å–±–æ—Ä–∫–∏!")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–∫–µ: {e}")
        input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")


def create_bat_file():
    """–°–æ–∑–¥–∞–µ—Ç BAT —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ—Å—Ç–æ–π —Å–±–æ—Ä–∫–∏"""
    bat_content = """@echo off
echo –ó–∞–ø—É—Å–∫ —Å–±–æ—Ä–∫–∏ Archive Structure Scanner...
python build.py
pause
"""

    with open("build.bat", "w", encoding="utf-8") as f:
        f.write(bat_content)
    print("‚úÖ –°–æ–∑–¥–∞–Ω build.bat –¥–ª—è –ø—Ä–æ—Å—Ç–æ–π —Å–±–æ—Ä–∫–∏")


if __name__ == "__main__":
    create_bat_file()
    build_exe()