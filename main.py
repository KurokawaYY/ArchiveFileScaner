import tkinter as tk
from tkinter import ttk, filedialog, messagebox
import threading
from pathlib import Path
import scanner
import excel_exporter
import logging
import time
import tkinterdnd2
import sys
import os


class ArchiveScannerGUI:
    def __init__(self, root):
        self.root = root
        self.root.title("–°–∫–∞–Ω–µ—Ä –∞—Ä—Ö–∏–≤–æ–≤ v0.6")
        self.center_window(900, 700)

        self.scanner = scanner.ArchiveScanner()
        self.exporter = excel_exporter.ExcelExporter()
        self.scan_thread = None
        self.scan_results = None
        self.is_scanning = False

        self.setup_ui()
        self.setup_logging()

        try:
            self.root.drop_target_register(tkinterdnd2.DND_FILES)
            self.root.dnd_bind('<<Drop>>', self.on_drop)
        except:
            pass

    def center_window(self, width, height):
        """–¶–µ–Ω—Ç—Ä–∏—Ä—É–µ—Ç –æ–∫–Ω–æ –Ω–∞ —ç–∫—Ä–∞–Ω–µ"""
        screen_width = self.root.winfo_screenwidth()
        screen_height = self.root.winfo_screenheight()

        x = (screen_width - width) // 2
        y = (screen_height - height) // 2

        self.root.geometry(f"{width}x{height}+{x}+{y}")

    def setup_logging(self):
        self.log_handler = TextHandler(self.log_text)
        logging.getLogger().addHandler(self.log_handler)
        logging.getLogger().setLevel(logging.INFO)

    def setup_ui(self):
        main_frame = ttk.Frame(self.root, padding="10")
        main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))

        self.root.columnconfigure(0, weight=1)
        self.root.rowconfigure(0, weight=1)
        main_frame.columnconfigure(1, weight=1)
        main_frame.rowconfigure(4, weight=1)

        # –û–±–ª–∞—Å—Ç—å –¥–ª—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
        ttk.Label(main_frame, text="–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –ø–∞–ø–∫—É —Å—é–¥–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä—É—á–Ω—É—é:",
                  font=('Arial', 10, 'bold')).grid(row=0, column=0, columnspan=3, sticky=tk.W, pady=(0, 10))

        self.drop_frame = ttk.LabelFrame(main_frame, text="–û–±–ª–∞—Å—Ç—å –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è", padding="10")
        self.drop_frame.grid(row=1, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=(0, 10))
        self.drop_frame.columnconfigure(0, weight=1)

        try:
            self.drop_frame.drop_target_register(tkinterdnd2.DND_FILES)
            self.drop_frame.dnd_bind('<<Drop>>', self.on_drop)
        except:
            pass

        drop_label = ttk.Label(self.drop_frame,
                               text="üóÇÔ∏è –ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –ø–∞–ø–∫—É —Å—é–¥–∞\n(–∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–û–±–∑–æ—Ä' –Ω–∏–∂–µ)",
                               font=('Arial', 9),
                               foreground="gray",
                               justify=tk.CENTER)
        drop_label.grid(row=0, column=0, pady=20)

        # –û—Å—Ç–∞–ª—å–Ω–æ–π UI –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        ttk.Label(main_frame, text="–¶–µ–ª–µ–≤–∞—è –ø–∞–ø–∫–∞:").grid(row=2, column=0, sticky=tk.W, pady=5)

        self.path_var = tk.StringVar()
        self.path_entry = ttk.Entry(main_frame, textvariable=self.path_var, width=60)
        self.path_entry.grid(row=2, column=1, sticky=(tk.W, tk.E), pady=5, padx=(5, 0))

        self.browse_btn = ttk.Button(main_frame, text="–û–±–∑–æ—Ä...", command=self.browse_folder)
        self.browse_btn.grid(row=2, column=2, padx=(5, 0), pady=5)

        button_frame = ttk.Frame(main_frame)
        button_frame.grid(row=3, column=0, columnspan=3, pady=10, sticky=(tk.W, tk.E))

        self.scan_btn = ttk.Button(button_frame, text="–°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å", command=self.start_scanning)
        self.scan_btn.pack(side=tk.LEFT, padx=(0, 10))

        self.stop_btn = ttk.Button(button_frame, text="–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", command=self.stop_scanning, state=tk.DISABLED)
        self.stop_btn.pack(side=tk.LEFT, padx=(0, 10))

        self.export_btn = ttk.Button(button_frame, text="–≠–∫—Å–ø–æ—Ä—Ç –≤ Excel", command=self.export_to_excel,
                                     state=tk.DISABLED)
        self.export_btn.pack(side=tk.LEFT, padx=(0, 10))

        self.preview_btn = ttk.Button(button_frame, text="–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä", command=self.show_preview, state=tk.DISABLED)
        self.preview_btn.pack(side=tk.LEFT, padx=(0, 10))

        self.clear_btn = ttk.Button(button_frame, text="–û—á–∏—Å—Ç–∏—Ç—å", command=self.clear_results)
        self.clear_btn.pack(side=tk.LEFT)

        progress_frame = ttk.Frame(main_frame)
        progress_frame.grid(row=4, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=5)
        progress_frame.columnconfigure(0, weight=1)

        self.progress_var = tk.DoubleVar()
        self.progress = ttk.Progressbar(progress_frame, variable=self.progress_var, maximum=100, mode='determinate')
        self.progress.grid(row=0, column=0, sticky=(tk.W, tk.E))

        self.progress_label = ttk.Label(progress_frame, text="0%")
        self.progress_label.grid(row=0, column=1, padx=(5, 0))

        ttk.Label(main_frame, text="–õ–æ–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:").grid(row=5, column=0, sticky=(tk.W, tk.N), pady=(10, 0))

        log_frame = ttk.Frame(main_frame)
        log_frame.grid(row=6, column=0, columnspan=3, sticky=(tk.W, tk.E, tk.N, tk.S), pady=5)
        log_frame.columnconfigure(0, weight=1)
        log_frame.rowconfigure(0, weight=1)

        self.log_text = tk.Text(log_frame, height=15, wrap=tk.WORD)
        scrollbar = ttk.Scrollbar(log_frame, orient=tk.VERTICAL, command=self.log_text.yview)
        self.log_text.configure(yscrollcommand=scrollbar.set)

        self.log_text.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        scrollbar.grid(row=0, column=1, sticky=(tk.N, tk.S))

        self.status_var = tk.StringVar(value="–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        status_bar = ttk.Label(main_frame, textvariable=self.status_var, relief=tk.SUNKEN)
        status_bar.grid(row=7, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=(5, 0))

    # ‚¨ÖÔ∏è –û–°–¢–ê–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô
    def on_drop(self, event):
        try:
            path = event.data.strip()
            if path.startswith('{') and path.endswith('}'):
                path = path[1:-1]
            path_obj = Path(path)
            if path_obj.is_dir():
                self.path_var.set(str(path_obj))
                self.status_var.set(f"–ü–∞–ø–∫–∞ –≤—ã–±—Ä–∞–Ω–∞: {path_obj.name}")
                logging.info(f"–ü–∞–ø–∫–∞ –≤—ã–±—Ä–∞–Ω–∞ —á–µ—Ä–µ–∑ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ: {path_obj}")
            else:
                messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –ø–∞–ø–∫—É, –∞ –Ω–µ —Ñ–∞–π–ª")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ: {e}")

    def show_preview(self):
        if not self.scan_results:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞")
            return
        PreviewWindow(self.root, self.scan_results)

    def _scan_completed(self):
        self.is_scanning = False
        self.scan_btn.config(state=tk.NORMAL)
        self.browse_btn.config(state=tk.NORMAL)
        self.stop_btn.config(state=tk.DISABLED)
        self.export_btn.config(state=tk.NORMAL)
        self.preview_btn.config(state=tk.NORMAL)
        count = len(self.scan_results) if self.scan_results else 0
        self.status_var.set(f"–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {count}")
        self.progress_label.config(text="100%")
        self.progress_var.set(100)
        logging.info(f"–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {count}")

    def clear_results(self):
        self.scan_results = None
        self.log_text.delete(1.0, tk.END)
        self.export_btn.config(state=tk.DISABLED)
        self.preview_btn.config(state=tk.DISABLED)
        self.progress_var.set(0)
        self.progress_label.config(text="0%")
        self.status_var.set("–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        logging.info("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—á–∏—â–µ–Ω—ã")

    def browse_folder(self):
        folder_path = filedialog.askdirectory()
        if folder_path:
            self.path_var.set(folder_path)

    def update_progress(self, value: float):
        self.progress_var.set(value)
        self.progress_label.config(text=f"{value:.1f}%")

    def start_scanning(self):
        folder_path = self.path_var.get()
        if not folder_path or not Path(folder_path).exists():
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–∞–ø–∫—É")
            return
        self.scan_btn.config(state=tk.DISABLED)
        self.browse_btn.config(state=tk.DISABLED)
        self.stop_btn.config(state=tk.NORMAL)
        self.export_btn.config(state=tk.DISABLED)
        self.preview_btn.config(state=tk.DISABLED)
        self.progress_var.set(0)
        self.progress_label.config(text="0%")
        self.status_var.set("–ü–æ–¥—Å—á–µ—Ç —Ñ–∞–π–ª–æ–≤...")
        self.is_scanning = True
        self.scanner.set_progress_callback(self.update_progress)
        self.scan_thread = threading.Thread(target=self._scan_thread, args=(folder_path,))
        self.scan_thread.daemon = True
        self.scan_thread.start()

    def _scan_thread(self, folder_path):
        try:
            self.scan_results = self.scanner.scan_directory(folder_path)
            if self.is_scanning:
                self.root.after(0, self._scan_completed)
        except Exception as e:
            if self.is_scanning:
                self.root.after(0, self._scan_failed, str(e))

    def stop_scanning(self):
        if self.is_scanning and self.scan_thread:
            self.is_scanning = False
            self.scanner.stop_scanning()
            self.status_var.set("–û—Å—Ç–∞–Ω–æ–≤–∫–∞...")
            logging.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è...")
            self.scan_thread.join(timeout=2.0)
            self.scan_btn.config(state=tk.NORMAL)
            self.browse_btn.config(state=tk.NORMAL)
            self.stop_btn.config(state=tk.DISABLED)
            self.status_var.set("–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            if self.scan_results:
                self.export_btn.config(state=tk.NORMAL)
                self.preview_btn.config(state=tk.NORMAL)

    def _scan_failed(self, error_msg):
        self.is_scanning = False
        self.scan_btn.config(state=tk.NORMAL)
        self.browse_btn.config(state=tk.NORMAL)
        self.stop_btn.config(state=tk.DISABLED)
        self.preview_btn.config(state=tk.DISABLED)
        self.status_var.set("–û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
        messagebox.showerror("–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏:\n{error_msg}")
        logging.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {error_msg}")

    def export_to_excel(self):
        if not self.scan_results:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ.")
            return
        try:
            file_path = filedialog.asksaveasfilename(
                defaultextension=".xlsx",
                filetypes=[("Excel files", "*.xlsx"), ("All files", "*.*")],
                title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫..."
            )
            if file_path:
                self.status_var.set("–≠–∫—Å–ø–æ—Ä—Ç –≤ Excel...")
                self.export_btn.config(state=tk.DISABLED)
                export_thread = threading.Thread(target=self._export_thread, args=(file_path,))
                export_thread.daemon = True
                export_thread.start()
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: {e}")
            self.export_btn.config(state=tk.NORMAL)

    def _export_thread(self, file_path):
        try:
            self.exporter.export_to_excel(self.scan_results, file_path)
            self.root.after(0, self._export_completed, file_path)
        except Exception as e:
            self.root.after(0, self._export_failed, str(e))

    def _export_completed(self, file_path):
        self.export_btn.config(state=tk.NORMAL)
        self.status_var.set(f"–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: {Path(file_path).name}")
        logging.info(f"–≠–∫—Å–ø–æ—Ä—Ç –≤ Excel –∑–∞–≤–µ—Ä—à–µ–Ω: {file_path}")
        messagebox.showinfo("–£—Å–ø–µ—Ö", f"–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤:\n{file_path}")

    def _export_failed(self, error_msg):
        self.export_btn.config(state=tk.NORMAL)
        self.status_var.set("–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞")
        messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –≤ Excel:\n{error_msg}")
        logging.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {error_msg}")


# ‚¨ÖÔ∏è –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –ö–õ–ê–°–° –ü–†–ï–î–ü–†–û–°–ú–û–¢–†–ê –° –¶–í–ï–¢–ê–ú–ò –ò –û–¢–°–¢–£–ü–ê–ú–ò
class PreviewWindow(tk.Toplevel):
    def __init__(self, parent, scan_results):
        super().__init__(parent)
        self.title("–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        self.center_window(1300, 700)
        self.resizable(True, True)
        self.scan_results = scan_results

        # ‚¨ÖÔ∏è –¶–í–ï–¢–ê –î–õ–Ø –†–ê–ó–ù–´–• –¢–ò–ü–û–í –§–ê–ô–õ–û–í
        self.colors = {
            'file': '#FFFFFF',  # –ë–µ–ª—ã–π - –æ–±—ã—á–Ω—ã–µ —Ñ–∞–π–ª—ã
            'directory': '#E3F2FD',  # –ì–æ–ª—É–±–æ–π - –ø–∞–ø–∫–∏
            'archive': '#FFF3E0',  # –û—Ä–∞–Ω–∂–µ–≤—ã–π - –∞—Ä—Ö–∏–≤—ã
            'archive_file': '#F3E5F5',  # –§–∏–æ–ª–µ—Ç–æ–≤—ã–π - —Ñ–∞–π–ª—ã –≤ –∞—Ä—Ö–∏–≤–∞—Ö
            'archive_directory': '#E8F5E8',  # –ó–µ–ª–µ–Ω—ã–π - –ø–∞–ø–∫–∏ –≤ –∞—Ä—Ö–∏–≤–∞—Ö ‚¨ÖÔ∏è –ù–û–í–´–ô –¶–í–ï–¢
            'nested_archive': '#FFEBEE',  # –ö—Ä–∞—Å–Ω—ã–π - –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –∞—Ä—Ö–∏–≤—ã
            'archive_error': '#FFCDD2'  # –†–æ–∑–æ–≤—ã–π - –æ—à–∏–±–∫–∏ –∞—Ä—Ö–∏–≤–æ–≤
        }

        self.setup_ui()
        self.load_data()

    def center_window(self, width, height):
        screen_width = self.winfo_screenwidth()
        screen_height = self.winfo_screenheight()
        x = (screen_width - width) // 2
        y = (screen_height - height) // 2
        self.geometry(f"{width}x{height}+{x}+{y}")

    def setup_ui(self):
        main_frame = ttk.Frame(self, padding="10")
        main_frame.pack(fill=tk.BOTH, expand=True)

        ttk.Label(main_frame, text="–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è",
                  font=('Arial', 12, 'bold')).pack(pady=(0, 10))

        table_frame = ttk.Frame(main_frame)
        table_frame.pack(fill=tk.BOTH, expand=True)

        # –°–æ–∑–¥–∞–µ–º Treeview
        columns = ('number', 'name', 'type', 'path', 'size', 'depth', 'archive_depth', 'crc32')
        self.tree = ttk.Treeview(table_frame, columns=columns, show='tree headings', height=20)

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        self.tree.heading('number', text='‚Ññ')
        self.tree.heading('name', text='–ò–º—è')
        self.tree.heading('type', text='–¢–∏–ø')
        self.tree.heading('path', text='–ü—É—Ç—å')
        self.tree.heading('size', text='–†–∞–∑–º–µ—Ä')
        self.tree.heading('depth', text='–ì–ª—É–±–∏–Ω–∞')
        self.tree.heading('archive_depth', text='–£—Ä. –∞—Ä—Ö–∏–≤–∞')
        self.tree.heading('crc32', text='–ö–æ–Ω—Ç—Ä. —Å—É–º–º–∞')

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É –∫–æ–ª–æ–Ω–æ–∫
        self.tree.column('number', width=40, anchor='center')
        self.tree.column('name', width=300)
        self.tree.column('type', width=100)  # ‚¨ÖÔ∏è –£–≤–µ–ª–∏—á–∏–ª–∏ –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π
        self.tree.column('path', width=350)
        self.tree.column('size', width=80)
        self.tree.column('depth', width=60)
        self.tree.column('archive_depth', width=60)
        self.tree.column('crc32', width=100)

        # –°–∫—Ä—ã–≤–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é –∫–æ–ª–æ–Ω–∫—É #0
        self.tree['show'] = 'headings'

        # ‚¨ÖÔ∏è –ù–ê–°–¢–†–ê–ò–í–ê–ï–ú –¢–ï–ì–ò –î–õ–Ø –¶–í–ï–¢–û–í
        self._setup_tree_tags()

        # –°–∫—Ä–æ–ª–ª–±–∞—Ä—ã
        v_scrollbar = ttk.Scrollbar(table_frame, orient=tk.VERTICAL, command=self.tree.yview)
        h_scrollbar = ttk.Scrollbar(table_frame, orient=tk.HORIZONTAL, command=self.tree.xview)
        self.tree.configure(yscrollcommand=v_scrollbar.set, xscrollcommand=h_scrollbar.set)

        self.tree.grid(row=0, column=0, sticky='nsew')
        v_scrollbar.grid(row=0, column=1, sticky='ns')
        h_scrollbar.grid(row=1, column=0, sticky='ew')

        table_frame.columnconfigure(0, weight=1)
        table_frame.rowconfigure(0, weight=1)

        self.status_var = tk.StringVar(value=f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(self.scan_results)}")
        status_bar = ttk.Label(main_frame, textvariable=self.status_var, relief=tk.SUNKEN)
        status_bar.pack(fill=tk.X, pady=(5, 0))

    def _setup_tree_tags(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Ü–≤–µ—Ç–æ–≤—ã–µ —Ç–µ–≥–∏ –¥–ª—è Treeview"""
        for item_type, color in self.colors.items():
            self.tree.tag_configure(item_type, background=color)

    def load_data(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü—É —Å –Ω—É–º–µ—Ä–∞—Ü–∏–µ–π –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∏–µ—Ä–∞—Ä—Ö–∏–µ–π"""
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞
        sorted_results = sorted(self.scan_results, key=lambda x: x['path'])

        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç–ª–µ–º–µ–Ω—Ç–∞–º –ø–æ –ø—É—Ç–∏
        path_to_id = {}
        row_number = 1

        # –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        for item in sorted_results:
            item_id = self.tree.insert(
                '',  # –∫–æ—Ä–Ω–µ–≤–æ–π —É—Ä–æ–≤–µ–Ω—å
                'end',
                values=(
                    row_number,
                    self.format_display_name(item),
                    self.get_type_display(item['type']),  # ‚¨ÖÔ∏è –ü–†–ê–í–ò–õ–¨–ù–û–ï –û–¢–û–ë–†–ê–ñ–ï–ù–ò–ï –¢–ò–ü–ê
                    item['path'],
                    item.get('size', 0),
                    item['depth'],
                    item.get('archive_depth', 0),
                    item.get('crc32', '')
                ),
                tags=(item['type'],)  # ‚¨ÖÔ∏è –î–û–ë–ê–í–õ–Ø–ï–ú –¢–ï–ì –î–õ–Ø –¶–í–ï–¢–ê
            )
            path_to_id[item['path']] = item_id
            row_number += 1

        # –ü–µ—Ä–µ—Å—Ç—Ä–∞–∏–≤–∞–µ–º –¥–µ—Ä–µ–≤–æ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∏–µ—Ä–∞—Ä—Ö–∏–µ–π
        self._rebuild_tree_with_hierarchy(path_to_id)

    def _rebuild_tree_with_hierarchy(self, path_to_id):
        """–ü–µ—Ä–µ—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –¥–µ—Ä–µ–≤–æ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∏–µ—Ä–∞—Ä—Ö–∏–µ–π –∏ –æ—Ç—Å—Ç—É–ø–∞–º–∏"""
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ —É—Ä–æ–≤–Ω—è–º
        levels = {}

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ —É—Ä–æ–≤–Ω—è–º –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏
        for item_path, item_id in path_to_id.items():
            level = item_path.count('\\') + item_path.count('/')
            if level not in levels:
                levels[level] = []
            levels[level].append((item_path, item_id))

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —É—Ä–æ–≤–Ω–∏ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é
        sorted_levels = sorted(levels.keys())

        # –ü–µ—Ä–µ—Å—Ç—Ä–∞–∏–≤–∞–µ–º –¥–µ—Ä–µ–≤–æ –æ—Ç –∫–æ—Ä–Ω—è –∫ –ª–∏—Å—Ç—å—è–º
        for level in sorted_levels:
            for item_path, item_id in levels[level]:
                item_data = self.tree.item(item_id)

                # –ù–∞—Ö–æ–¥–∏–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –ø—É—Ç—å
                parent_path = str(Path(item_path).parent)

                # –ï—Å–ª–∏ —Ä–æ–¥–∏—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–µ—Ä–µ–º–µ—â–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç
                if parent_path in path_to_id and parent_path != item_path:
                    parent_id = path_to_id[parent_path]

                    # –£–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –∏ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –∫ —Ä–æ–¥–∏—Ç–µ–ª—é
                    self.tree.delete(item_id)
                    new_item_id = self.tree.insert(
                        parent_id,
                        'end',
                        values=item_data['values'],
                        tags=item_data['tags']  # ‚¨ÖÔ∏è –°–û–•–†–ê–ù–Ø–ï–ú –¢–ï–ì–ò
                    )
                    path_to_id[item_path] = new_item_id

        # ‚¨ÖÔ∏è –î–û–ë–ê–í–õ–Ø–ï–ú –û–¢–°–¢–£–ü–´ –î–õ–Ø –§–ê–ô–õ–û–í –í –ü–ê–ü–ö–ê–•
        self._add_indentation()

        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å–∫—Ä—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ —É—Ä–æ–≤–Ω–∏
        for item_id in self.tree.get_children():
            self.tree.item(item_id, open=True)
            for child_id in self.tree.get_children(item_id):
                self.tree.item(child_id, open=True)

    def _add_indentation(self):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –≤–∏–∑—É–∞–ª—å–Ω—ã–µ –æ—Ç—Å—Ç—É–ø—ã –¥–ª—è —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–∞—Ö"""
        for item_id in self.tree.get_children():
            parent_data = self.tree.item(item_id)
            parent_values = list(parent_data['values'])

            # ‚¨ÖÔ∏è –î–õ–Ø –ö–û–†–ù–ï–í–´–• –≠–õ–ï–ú–ï–ù–¢–û–í - –ë–ï–ó –û–¢–°–¢–£–ü–ê
            parent_values[1] = parent_values[1]  # –∏–º—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π

            self.tree.item(item_id, values=tuple(parent_values))

            # ‚¨ÖÔ∏è –î–õ–Ø –î–û–ß–ï–†–ù–ò–• –≠–õ–ï–ú–ï–ù–¢–û–í - –î–û–ë–ê–í–õ–Ø–ï–ú –û–¢–°–¢–£–ü
            for child_id in self.tree.get_children(item_id):
                child_data = self.tree.item(child_id)
                child_values = list(child_data['values'])

                # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø –∫ –∏–º–µ–Ω–∏
                child_values[1] = "    " + child_values[1]

                self.tree.item(child_id, values=tuple(child_values))

                # ‚¨ÖÔ∏è –†–ï–ö–£–†–°–ò–í–ù–û –î–õ–Ø –í–õ–û–ñ–ï–ù–ù–´–• –≠–õ–ï–ú–ï–ù–¢–û–í
                for grandchild_id in self.tree.get_children(child_id):
                    grandchild_data = self.tree.item(grandchild_id)
                    grandchild_values = list(grandchild_data['values'])

                    # –î–æ–±–∞–≤–ª—è–µ–º –¥–≤–æ–π–Ω–æ–π –æ—Ç—Å—Ç—É–ø
                    grandchild_values[1] = "        " + grandchild_values[1]

                    self.tree.item(grandchild_id, values=tuple(grandchild_values))

    def format_display_name(self, item):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–º—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü–µ"""
        name = item['name']

        # ‚¨ÖÔ∏è –ü–†–ê–í–ò–õ–¨–ù–´–ï –ü–†–ï–§–ò–ö–°–´ –î–õ–Ø –†–ê–ó–ù–´–• –¢–ò–ü–û–í
        if item['type'] == 'directory':
            return f"[–ü–ê–ü–ö–ê] {name}"
        elif item['type'] == 'archive':
            return f"[–ê–†–•–ò–í] {name}"
        elif item['type'] == 'nested_archive':
            return f"[–í–õ–û–ñ. –ê–†–•–ò–í] {name}"
        elif item['type'] == 'archive_file':
            return f"[–§–ê–ô–õ –í –ê–†–•–ò–í–ï] {name}"
        elif item['type'] == 'archive_directory':
            return f"[–ü–ê–ü–ö–ê –í –ê–†–•–ò–í–ï] {name}"  # ‚¨ÖÔ∏è –ù–û–í–´–ô –ü–†–ï–§–ò–ö–°
        else:
            return f"[–§–ê–ô–õ] {name}"

    def get_type_display(self, item_type):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∏–ø–∞"""
        type_map = {
            'file': '–§–∞–π–ª',
            'directory': '–ü–∞–ø–∫–∞',
            'archive': '–ê—Ä—Ö–∏–≤',
            'archive_file': '–§–∞–π–ª –≤ –∞—Ä—Ö–∏–≤–µ',
            'archive_directory': '–ü–∞–ø–∫–∞ –≤ –∞—Ä—Ö–∏–≤–µ',  # ‚¨ÖÔ∏è –ù–û–í–´–ô –¢–ò–ü
            'nested_archive': '–í–ª–æ–∂. –∞—Ä—Ö–∏–≤',
            'archive_error': '–û—à–∏–±–∫–∞ –∞—Ä—Ö–∏–≤–∞'
        }
        return type_map.get(item_type, item_type)

class TextHandler(logging.Handler):
    def __init__(self, text_widget):
        super().__init__()
        self.text_widget = text_widget

    def emit(self, record):
        msg = self.format(record)

        def append():
            self.text_widget.insert(tk.END, msg + '\n')
            self.text_widget.see(tk.END)
            self.text_widget.update_idletasks()

        self.text_widget.after(0, append)

def main():
    try:
        import tkinterdnd2
        root = tkinterdnd2.TkinterDnD.Tk()
    except ImportError:
        root = tk.Tk()
        logging.warning("tkinterdnd2 –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")

    app = ArchiveScannerGUI(root)
    root.mainloop()

if __name__ == "__main__":
    main()